#ifndef _MODULE
! #define _MODULE naive
#endif

@Test
subroutine multiplicationToSingularResultTest()
  use pfunit_mod
  use _MODULE
  implicit none
  real ( kind = 8) :: f(1,2) ! pierwsza macierz
  real ( kind = 8) :: s(2 ,1) ! druga macierz
  real ( kind = 8) :: m(1,1) ! macierz wynikowa
  real ( kind = 8) :: expected(1,1) ! macierz wynikowa
  integer ( kind = 4) :: stat! kod błędu, 0 gdy OK

  f= 1.1
  s= 2.3
  expected = reshape([1.1 * 2.3 * 2], shape(expected))
  call mm(f, s, m, stat)

  @assertEqual(stat,0)
  @assertEqual(m, expected, 1.0d-5)
end subroutine

@Test
subroutine signularMatricesTest()
  use pfunit_mod
  use _MODULE
  implicit none
  real ( kind = 8) :: f(1,1) ! pierwsza macierz
  real ( kind = 8) :: s(1 ,1) ! druga macierz
  real ( kind = 8) :: m(1,1) ! macierz wynikowa
  real ( kind = 8) :: expected(1,1) ! macierz wynikowa
  integer ( kind = 4) :: stat! kod błędu, 0 gdy OK

  f= 2
  s= 3
  expected = reshape([6], shape(expected))
  call mm(f, s, m, stat)

  @assertEqual(stat,0)
  @assertEqual(m,expected)
end subroutine


@Test
subroutine mismachedDimensionsFailTest()
  use pfunit_mod
  use _MODULE
  implicit none
  real ( kind = 8) :: f(1,2) ! pierwsza macierz
  real ( kind = 8) :: s(3,4) ! druga macierz
  real ( kind = 8) :: m(1,1) ! macierz wynikowa
  integer ( kind = 4) :: stat! kod błędu, 0 gdy OK

  f= 0
  s= 0
  call mm(f, s, m, stat)

  @assertGreaterThan(stat,0)
end subroutine

@Test
subroutine mismachedResultDimensionsFailTest()
  use pfunit_mod
  use _MODULE
  implicit none
  real ( kind = 8) :: f(1,2) ! pierwsza macierz
  real ( kind = 8) :: s(2,3) ! druga macierz
  real ( kind = 8) :: m(1,1) ! macierz wynikowa
  integer ( kind = 4) :: stat! kod błędu, 0 gdy OK

  f= 0
  s= 0
  call mm(f, s, m, stat)

  @assertGreaterThan(stat,0)
end subroutine

@Test
subroutine singeRowTest()
  use pfunit_mod
  use _MODULE
  implicit none
  real ( kind = 8) :: f(1,4) ! pierwsza macierz
  real ( kind = 8) :: s(4,2) ! druga macierz
  real ( kind = 8) :: m(1,2) ! macierz wynikowa
  real ( kind = 8) :: expected(1, 2)
  integer ( kind = 4) :: stat! kod błędu, 0 gdy OK

  f = reshape([1,2,3,4], shape(f))
  s = reshape([2,3,4,5], shape(s))
  expected = matmul(f, s)
  call mm(f, s, m, stat)

  @assertEqual(stat, 0)
  @assertEqual(m, expected)
end subroutine


@Test
subroutine singleColumnTest()
  use pfunit_mod
  use _MODULE
  implicit none
  real ( kind = 8) :: f(4,1) ! pierwsza macierz
  real ( kind = 8) :: s(1,3) ! druga macierz
  real ( kind = 8) :: m(4,3) ! macierz wynikowa
  real ( kind = 8) :: expected(4, 3)
  integer ( kind = 4) :: stat! kod błędu, 0 gdy OK

  f= 3
  s= 2
  expected = matmul(f, s)
  call mm(f, s, m, stat)

  @assertEqual(stat, 0)
  @assertEqual(m, expected)
end subroutine

@Test
subroutine simpleMultiplicationTest()
  use pfunit_mod
  use _MODULE
  implicit none
  real ( kind = 8) :: f(2,3) ! pierwsza macierz
  real ( kind = 8) :: s(3,4) ! druga macierz
  real ( kind = 8) :: m(2,4) ! macierz wynikowa
  real ( kind = 8) :: expected(2, 4)
  integer ( kind = 4) :: stat! kod błędu, 0 gdy OK

  f = reshape([1,4,2,5,3,6], shape(f))
  s = reshape([1,5,9,2,6,10,3,7,11,4,8,12], shape(s))
  expected = reshape([38, 83, 44, 98, 50, 113, 56, 128], shape(expected))
  call mm(f, s, m, stat)

  @assertEqual(stat, 0)
  @assertEqual(m, expected)
end subroutine

@Test
subroutine hugeMatrixTest()
  use pfunit_mod
  use _MODULE
  implicit none
  real ( kind = 8) :: f(100,2000) ! pierwsza macierz
  real ( kind = 8) :: s(2000,500) ! druga macierz
  real ( kind = 8) :: m(100,500) ! macierz wynikowa
  real ( kind = 8) :: expected(100, 500)
  integer ( kind = 4) :: stat, i,j! kod błędu, 0 gdy OK

  do i = 1, size(f, 1)
    do j = 1, size(f, 2)
      f(i,j) = i * j * 0.25
    end do
  end do
  do i = 1, size(s, 1)
    do j = 1, size(s, 2)
      s(i,j) = i * j * 0.10
    end do
  end do

  expected = matmul(f,s)
  call mm(f, s, m, stat)

  @assertEqual(stat, 0)
  @assertEqual(m, expected, 1.0d-3)
end subroutine